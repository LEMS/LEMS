<page>
    <h1>User defined types for simulation and display</h1>
    
    <p>
        Up until now, the examples have used a set of simple <x>Simulation</x>, <x>Display</x> and <x>Line</x> 
        constructs without explaining how they are defined.
        This shows what is needed in the <x>Behavior</x> block to let the user defined types to specify that
        they actually define a runnable simulation or settings that can be used to display results.
    </p>
    <p>
        This means that the user can select their own names for the different parameters required for a simulation, and, 
        more importantly, simulation and display attributes can be added to existing type definitions to make multi-faceted
        type definitions that can both be run on their own or as part of a larger simulation.
    </p>

<p>
    Example 6 shows two new elements that can be used in the <x>Behavior</x> block, <x>Run</x> and <x>Show</x> as illustrated
    in the following user-defined type that defines a simulation:
</p>

<xcode>
<ComponentType name="Simulation">
    <Parameter name="length" dimension="time"/>
    <Parameter name="step" dimension="time"/>
    <ComponentRef name="target" type="HHCell"/>
    <Children name="displays" type="Display"/>
    <Behavior>
        <StateVariable name="t" dimension="time"/>
        <Run component="target" variable="t" increment="step" total="length"/>
        <Show src="displays"/>
    </Behavior>
</ComponentType>
</xcode>
<p>
The 'component' attribute of the <x>Run</x> element specifies which parameter of the type contains the reference to the 
component that should actually be run. The 'step' and 'increment' attributes specify the parameters that hold the 
timestep and total runtime. The 'variable' attribute is for future use - at present, the independent variable is always 
't'.
</p>
 
<p>
    A <x>Run</x> element can be added to the Behavior block in any type definition to make it independently runnable.
</p>
<p>
    Running a simulation without any output is rarely much use, so there are two futher elements that can be included
    in the <x>Behavior</x> block: <x>Show</x> and <x>Record</x>. The 'src' attribute of the <x>Show</x> element points to the
    components that should be shown. These in turn can contain other <x>Show</x> elements but eventually everything pointed
    to by a <x>Show</x> element should contain one or more <x>Record</x> elements. These specify what will actually be 
    sent as output. They have the path to the variable as the 'quantity' attribute, its scale as the 'scale' attribute and 
    the line color for plotting.
</p>
<p>
The following two types show one way that these can be combined to allow the user to express a display object containing one
or more lines.
</p>

<xcode>
<ComponentType name="Display">
    <Parameter name="timeScale" dimension="time"/>
    <Children name="lines" type="Line"/>
    <Behavior>
         <Show src="lines" scale="timeScale"/>
    </Behavior>
</ComponentType>

<ComponentType name="Line">
    <Parameter name="scale" dimension="*"/>
    <Text name="color"/>
    <Path name="quantity"/>
    <Behavior>
        <Record quantity="quantity" scale="scale" color="color"/>
    </Behavior>
</ComponentType>
</xcode>


<p>
Once these have been defined, a component can be constructed that uses them as follows:
</p>

<xcode>
<Simulation id="sim1" length="80ms" step="0.05ms" target="hhcell_1">
    <Display timeScale="1ms">
        <Line id="V" quantity="v" scale="1mV" color="#0000f0"/>
         
        <Line id="Na_q" quantity="NaPop/geff" scale="1nS" color="#f00000"/>
        <Line id="K_q" quantity="KPop/geff" scale="1nS" color="#00f000"/>
         
    </Display>
</Simulation>
</xcode>

<p>
When run, this produces the output shown below:
</p>

<img src="ex6run.png"/>

<p>
Note how the scale attributes are set to 1mV and 1nS for the different lines so that they show up on the same axes.
</p>



</page>